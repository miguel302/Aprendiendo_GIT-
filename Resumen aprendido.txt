Empiezo a ver video de "homa mundo"  git en una hora   https://www.youtube.com/watch?v=VdGzPZ31ts8&t=737s

		Dice de aprender por terminal " ya que entornos visuales como githab tiene limitaciones"

		configurar git 
			git config --global user.name "miguel garcia"
			git config --global user.email mgcampoy2@gmail.com
			git config --global core.editor "code --wait"· #CODE STUDIO VISUAL como predeterminado
			git config --global -e
				# Dice "dice las diferencia entre los equipos con windows y linux que trabajan sobre del mismo repositorio" 		habla de salto de linea entiendo que no hace daño aunq no lo utilice
			git config --global core.autocrlf input # este comando corregir diferencias entre 2 usuario de un mismo repositorio con windos y mac/linux para hacer compatiblepara linux mac y para windows seria false en lugar de input
			# termino para mas informacion git config --h 
			
		comandos basicos
			code . #el punto dice q abra el programa desde la carpeta de donde este
			git add . #sube a stage todo lo q haya en la carpeta, PERO NO LO RECOMIENDA por puede q se suba algo q no queramos, archivo binarios (grande) ej. imagenes ejecutables
			git commit -m "menter mensaje en el mismo "
			git commit # Abre txt con VSC indicando q mensaje ha sido modificado y poner comentario, mas extentenso 
			git rm "archivoxxx"   "Ahorra 2 comando (borrado y git add)
			git restore --staged 1ª\ prueba.txt  # esto es para recuperar de staged (en el ejemplo de borrar)
			git restore 1ª\ prueba.txt pasarlo carpeta de S.O. # ojo descarta los cambios que se hayan hecho
			git mv Archivo1.txt Archivo.txt #renomobrar y subir staged en un solo comando
			
			# para los archivos y carpetas que se quieran ignorar habrá que crear un archivo
			# que se tiene q llamar     gitignore     y dentro de este habra que espeficicar que
			# ignorar.  --> 
			git add .gitignore # ignorar archivos para no subir al repositorio, ej variable de entorno,
			git commit .gitigonore 

			
			git diff #muestra las diferencias q se hecho en cada diferencia dentro de cada archivo
			git diff --staged
			git log  #mucha informacion q no le gusta a nicolas
			git log --oneline  #te muestra los commit y los comentario

			BRANCH

			git branch  #consultar en la rama que estamos
			git checkout -b rama-b  #crear una rama
			# si ejecutamos git log --oneline   vemos la rama activo --> HEAD en este caso rama-b 
			git checkout "nombre rama"   #nos cambia a la rama 
			git marge ramab # ejecutamos desde donde queremos reciba los cambios #traernos cambio de la rama b a master

			SUBIR A GITHUB
			git remote add origin https://github.com/miguel302/Aprendiendo_GIT-
			git -u origin master # -u siginifica que se pide q se cree la carptera en el remoto 

			git checkout -c ramaC
			git push -u origin ramaC

			TECLAS DE ATAJO
			CTRL + tab  -- cambiar de archivo activo
			ctrl + "-"  -- zoom alegar y al ver con el +
			ctrl + s    -- Guardar 
			ctrl + w    -- cerrar archivo